// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ChatHeading should render 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ChatHeading
    title="Mock"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <WithStyles(AppBar)
        position="static"
>
        <WithStyles(Toolbar)>
                <WithStyles(Typography)
                        color="inherit"
                        variant="title"
                >
                        Mock
                </WithStyles(Typography)>
        </WithStyles(Toolbar)>
</WithStyles(AppBar)>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <WithStyles(Toolbar)>
          <WithStyles(Typography)
                    color="inherit"
                    variant="title"
          >
                    Mock
          </WithStyles(Typography)>
</WithStyles(Toolbar)>,
        "position": "static",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Typography)
            color="inherit"
            variant="title"
>
            Mock
</WithStyles(Typography)>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Mock",
            "color": "inherit",
            "variant": "title",
          },
          "ref": null,
          "rendered": "Mock",
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <WithStyles(AppBar)
          position="static"
>
          <WithStyles(Toolbar)>
                    <WithStyles(Typography)
                              color="inherit"
                              variant="title"
                    >
                              Mock
                    </WithStyles(Typography)>
          </WithStyles(Toolbar)>
</WithStyles(AppBar)>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Toolbar)>
            <WithStyles(Typography)
                        color="inherit"
                        variant="title"
            >
                        Mock
            </WithStyles(Typography)>
</WithStyles(Toolbar)>,
          "position": "static",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Typography)
              color="inherit"
              variant="title"
>
              Mock
</WithStyles(Typography)>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Mock",
              "color": "inherit",
              "variant": "title",
            },
            "ref": null,
            "rendered": "Mock",
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
